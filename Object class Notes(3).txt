Object class :
=============
Object is a one of predefind java class which developed java people. it is act like a master super class or all java classes or every class should be a sub class to object class either direct or indirect. 

Object class is present in java.lang package. here java.lang package is declared as a default package for all java clsses so what ever the classes are present in java.lang package we can use directly without import statements.

imprtant classes in java.lang pkg :

Object 
System 
String 
StringBuffer
StringBuilder
Byte
Short
Integer
Long
Float
Double
Boolean
Charactor 

Object.java
============
package java.lang;
public class Object{
   // Object class members
   public Object(){
   
   }
}

Objec class members:
====================

1 No arg Constructor : 
public Object(){
   
   }
   
   object class having only one constructor i.e no arg constructor or defualt constructor.
 Methods:
=========== 
 1. toString()
 2. equals()
 3. hashCode()
 4. clone()
 5. finalized()

these 5 methods are very imprtant methods for all java classes 

6. wait()
7. notify()
8. notifyAll()

these 3 methdos we will use it only for Thead class

lets start with 
 1. toString(): toString method will convert any object value into a String format.
     syntax :
	    public String toString(){
		}
		
  as per the Object class toString() will give the output of any object is : 
   "fullyQualifiedclassName"+"@"+ "ObjectMemoryLocation in hexa decimal format"
   
    public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }
   
  exaple:  com.k7it.Person@2dda6444
  
  public class Person {

	private int age;
	private String name;
	private double ht;
	private double wt;
	public static Address address = new Address(10,"4th cross","Balari","KA","IND",560023);

	public Person() {
		super();
	}

	public Person(int age, String name, double ht, double wt, Address address) {
		super();
		this.age = age;
		this.name = name;
		this.ht = ht;
		this.wt = wt;
		this.address = address;
	}
}

public class Address {
	private int doorNo;
	private String street;
	private String city;
	private String state;
	private String country;
	private int pincode;

	// no arg constructor
	public Address() {
		super();
	}

// all argument constructor 
	public Address(int doorNo, String street, String city, String state, String country, int pincode) {
		super();
		this.doorNo = doorNo;
		this.street = street;
		this.city = city;
		this.state = state;
		this.country = country;
		this.pincode = pincode;
	}
public class Address {
	private int doorNo;
	private String street;
	private String city;
	private String state;
	private String country;
	private int pincode;

	// no arg constructor
	public Address() {
		super();
	}

// all argument constructor 
	public Address(int doorNo, String street, String city, String state, String country, int pincode) {
		super();
		this.doorNo = doorNo;
		this.street = street;
		this.city = city;
		this.state = state;
		this.country = country;
		this.pincode = pincode;
	}
}

public class ObjectClsDemo extends Object{

	public static void main(String[] args) {
		Person p1 = new Person();
		p1.setAge(10);
		p1.setName("Tharun");
		p1.setHt(5.5);
		p1.setWt(60.25);
		
		Address a1 = new Address();
		a1.setDoorNo(17);
		a1.setStreet("3rd cross");
		a1.setCity("Blr");
		a1.setState("KA");
		a1.setCountry("IND");
		a1.setPincode(560043);
		
		p1.setAddress(a1);
		
		Person p2 = new Person(24,"Sahana",5.5,55.25,new Address(10,"4th cross","Balari","KA","IND",560023));
		
		Address a2 = new Address(10,"4th cross","Balari","KA","IND",560023);
		Person p3 =  new Person(25,"babu",5.6,55.0,a2);
		Person p4 =  new Person(25,"Prasad",5.6,55.0,a1);
		
		String str1  = "good morning";
		String str2  = new String ("good morning");
		
		System.out.println(str1);// Goomorning 
		System.out.println(str2);// Goomorning 
		
		System.out.println(p1);
		System.out.println(p2);
		System.out.println(p3);
		System.out.println(p4);
		System.out.println(a1);
		System.out.println(a2);
		
		
	//	Person.address.
		
	}
}

output: 

good morning
good morning
com.k7it.Person@2dda6444  -> this output is generated by toString() of object class 
com.k7it.Person@5e9f23b4
com.k7it.Person@4783da3f
com.k7it.Person@378fd1ac
com.k7it.Address@49097b5d
com.k7it.Address@6e2c634b

Note: what ever the object if are trying to print using sop statements it will convert into objref.toString();

		System.out.println(str1);
		System.out.println(str2);		
		System.out.println(p1);
		System.out.println(p2);
		System.out.println(p3);
		System.out.println(p4);
		System.out.println(a1);
		System.out.println(a2);
		
		System.out.println(str1.toString()); //good morning
		System.out.println(str2.toString());//good morning		
		System.out.println(p1.toString());// com.k7it.Person@2dda6444 
		System.out.println(p2.toString());//com.k7it.Person@5e9f23b4
		System.out.println(p3.toString());// com.k7it.Person@4783da3f
		System.out.println(p4.toString());//com.k7it.Person@378fd1ac
		System.out.println(a1.toString());//com.k7it.Address@49097b5d
		System.out.println(a2.toString());//com.k7it.Address@6e2c634b
		
		Note: as per the Object class toString methdos it will give the output like class name and object memory location in hexa decimal format, but as a java developer we should not concentrate much on object memory
		location we should concentrate on object values or content or state.
		so if want to print values of the object instead of memory location of objects then we should over right
		toString() inside our class. 
		
		
		first override toString() in person clas like bellow:
		
		public String toString() {
		return "Age:"+age+",Name:"+name+",Ht:"+ht+",Wt:"+wt+",Address:"+address.toString();
	}
		 output of above program:
		 ===========================
		good morning
		good morning
		Age:10,Name:Tharun,Ht:5.5,Wt:60.25,Address:com.k7it.Address@2dda6444
		Age:24,Name:Sahana,Ht:5.5,Wt:55.25,Address:com.k7it.Address@2dda6444
		Age:25,Name:babu,Ht:5.6,Wt:55.0,Address:com.k7it.Address@2dda6444
		Age:25,Name:Prasad,Ht:5.6,Wt:55.0,Address:com.k7it.Address@2dda6444
		com.k7it.Address@2dda6444
		com.k7it.Address@728938a9

   here person class direct attributes are printing values but address class attribute printing again class name and hexa decimal value. to avoid this means we need to override toString() inside Address
   class as well.
   
   @Override
	public String toString() {
		return "Address [doorNo=" + doorNo + ", street=" + street + ", city=" + city + ", state=" + state + ", country="
				+ country + ", pincode=" + pincode + "]";
	}
	
	here we are addign override toString method using eclipse it will generate toString() automatically with all of our clas attributes like above. 
	
	after this changes abobe program output will be :
	
	good morning
good morning
Age:10,Name:Tharun,Ht:5.5,Wt:60.25,Address:Address [doorNo=17, street=3rd cross, city=Blr, state=KA, country=IND, pincode=560043]
Age:24,Name:Sahana,Ht:5.5,Wt:55.25,Address:Address [doorNo=17, street=3rd cross, city=Blr, state=KA, country=IND, pincode=560043]
Age:25,Name:babu,Ht:5.6,Wt:55.0,Address:Address [doorNo=17, street=3rd cross, city=Blr, state=KA, country=IND, pincode=560043]
Age:25,Name:Prasad,Ht:5.6,Wt:55.0,Address:Address [doorNo=17, street=3rd cross, city=Blr, state=KA, country=IND, pincode=560043]
Address [doorNo=17, street=3rd cross, city=Blr, state=KA, country=IND, pincode=560043]
Address [doorNo=10, street=4th cross, city=Balari, state=KA, country=IND, pincode=560023]


	     