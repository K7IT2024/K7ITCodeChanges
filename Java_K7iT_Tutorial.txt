

Software: the process of converting our imaginaries into a reality by using set programs is called as software.

software can divided into 3 types mainly 

1. system software : it is software which is used to control the functionality of hardwards like washing machine  softwares, JCB softwares , oven, cars engine , robos , dvd players, flopy disk softwares etc. 

These softwares are called as Stand alone softwares.

scope: sysstem softwares scope is with in the device
   
2. application/Intranet softwareres :  it is also a sofgtwares, which is used to control the functionality of organizational oriented  process those softwares are called application softwares example: hospital management softwares, college management softwares, Bank procees softwares, telephone service with in the building  etc .

these applications also called as intranet application;

scope: intranet softwares scope  is with in the building or organization.


3. internet softwares : the sofwares which are used  thorugh internate from any where in the wold (WWW)  those softwares called as internate applications.  www applications are called as internet applications, these applications also called as wold wise web applications.
	
	 here in this 
	 system softwares :  this softwares are stand alone softwares/ applications
	 application softwares : is called as intranet softwares	 
	 internet softwares : this distributed softwares / applications 
	 
	 scope: internet softwares scope  is entire world.


	 types of applications: 
	     1. stand alone applications:

		    the softwares where we have  installed in that system only we can able to use that softwares,  those  softwares are called as standalone applications.
		   like VLC players, MS Office , antivirus software, OS, 
			
		   this type of softwares we can't share with others i.e these are not sharable applications
						 			   
			all system softwares and application softwares will comes under standalone applications. 
  			
		 2. distributed applications: all internate applications are called as a distributed applications .
		   these softwares we can access from any where thorugh internate(www). like gmail, yahoo, facebook,  youtube, twitter etc applications are called internate applications. 
		   these applications are sharable applications. 
		   
		  
		  if we want to develop any of these applications we need the progrmaing languages like C, C++, java, .net, python , angular. 
		  
		  in these programing languages java has the huge demand in the market: so we are going to learn java programming language . 
		  
		  
		  Lets start Java: 
		  
		  introduction about java:
		  =========================
		  
		  -> java is a object oriented programing language(oops), it means in java everything we can achive in the form of classes and Objects formates only.
		  
		  -> java is open source software : open source means its a free of cost. we no need to pay even single ruppe for using java software for developing our projects. because of this java getting  huge market in the software world. 
		  
		  -> java is platform independent software :  write once run anywhere is called platform independent language. 
		  write the program in one operationg system same program we can execute or run in any  
			  other operating is called platform independent programs. 
			  
		  -> java is highly secure language.
		  
		  
		   history about java :
		   ====================
              who  is father of java:?
				
					->james gosling is the father of java 
			
			  what is the first name of java?
					-> OAK is the first name of java , it is one of tree name where they were taking rest when they are feeling tired.
					
			 what is the symbol of java?
				   -> hot coffee cup is first symbol of java 
		     when java is introduced in the market ?
				  January 1991
		     which company published java first time?
					sun micro systems is published java first time in market 1995
				 
			 what is the cartoon symbol of java ?
			     duke is the cartoon symbol of java, it looks like pengvin 
				 
			 when jdk 1.0 is released into market ?
               JDK 1.0 released in (January 23, 1996) release by Sun micro system
			   
            what is the current company of java?
                	Oracle company publishing java present. from 2009 oracle company occuired Sun micro system 
					

            what are the certificates in java   
			  old:
              SCJP :  Sun certificated java programer
              SCWCD:  sun certificated web componet developer
              SCECD 	
              now: 			  
              OCJP :  Oracle certificated java programer
			  OCWCD : oracle certificated web componet developer
			  
			  
				
					Types of java:
					=============
					
					1.J2SE : Java 2 standard edition : by using J2SE we can develop stand alone applications 
						   like mobile games, video games , anti virus, vlc players.
						   (.jar)  java Archive files
						   the budle of set of java programs are called jar file
						   or (.exe)  -> executable files
													   
					2.J2ME : Java 2 Micro edition / Mobile Edition : by using J2ME we can develop mobile applications
					                                       even android applications are developed by Java only.
															.apk
					3.J2EE : Java 2 EnterPrize Edition: by using J2EE we can develop EJB applications like large scale applications i.e warehouse managemnts or bank applications etc where we need highly secure and very big appications we can go for J2EE. 
					 like Web appplication (.war) or EnterPrize applications(.ear) (.war)
					
 					 jar -> java archive   -> .java files  -> to run we need  cmd prompt
					 
					 war -> web archive  -> .java files + web.xml (Web container) ->  to run we need  web server(Tomcat) + browser
					 
					 ear -> enterprize archive -> .java files +  web.xml (web container)+ applicalication container -> to run we need application server(Web logic, webshpere,jboss) + browser
					 
					 apk -> android package								 
														 
					  we want to become web application developer so we can learn only J2SE and J2EE.
					  
					  if we want to become modile developer then we need to lean j2se and j2me.
					  
					  
					  
					  
					  
					  J2SE: core java
					  
					   Versions of java : 
					   
				 java is having 21 version as of now : 
				  
					JDK Alpha and Beta (1995)
					JDK 1.0 (23rd Jan 1996)
					JDK 1.1 (19th Feb 1997)
					J2SE 1.2 (8th Dec 1998)
					J2SE 1.3 (8th May 2000)
					J2SE 1.4 (6th Feb 2002)
					J2SE 5.0 (30th Sep 2004) -> this version makes java very huge impact in market
					Java SE 6 (11th Dec 2006) --- sun  micro system published still this version 
					Java SE 7 (28th July 2011) -- Oracle company pushing java from here  (2009 - 2011)
					Java SE 8 (18th Mar 2014)
					Java SE 9 (21st Sep 2017)
					Java SE 10 (20th Mar 2018)
					Java SE 11 (September 2018)
					Java SE 12 (March 2019)
					Java SE 13 (September 2019)
					Java SE 14 (Mar 2020)
					Java SE 15 (September 2020)
					Java SE 16 (Mar 2021)
					Java SE 17 (September 2021)
					Java SE 18 ( March 2022)
					Java SE 19 (Sep 2022)
					java SE 20 ( Mar 2023)
					java SE 21 ( Sep 2023)
					java se 22 ( Mar 2024)
					java se 23 (it will come on Sep 2024)
					
					  How to install java software or JDK :
					  
					  1. download jdk 22 software from oracle web site: 
					     https://www.oracle.com/in/java/technologies/downloads/#jdk22-windows
						 
						  down load jdk 22  with 64 bit operating compatability for windows.
						  
						  create oracle account if we dont already. if you have account just login it will 
						  download jdk automaticaly.
				      2.  doble click on downlaod software -> 
					        then we will one pop with 3 options 
							    1. development tools  : mandatory options we cant install java without this feature
								2. source code: optional if we want we can install this feature else we can ignore
								3. public JRE: its not mandatory option, we can ignore this feature, this freature is 
								               not required for the developer.  it is required for only production purpose
											   or end user user purpose we need public jre.  for developers private JRE 
											   enough.
							  
							    by default our java software will try to install under C:\ program files folder like bellow
								
								C:\Program Files\Java\jdk-22\;
								
								C:\Java\jdk-22\;
								D:\Java\jdk-22\;
								
								But its not advisible to install java software under program files folder. 
								1.why beacuse as per the java standards we should not maintain space between any 2 words 
								for folder names or file name. but here program and files words have one single space between
                                those 2 words. 		
                                2. in case if we unstall OS then our java software also will loose from computer.

                                 so dont install our java software under C:\ program files folder 
                                 C: used it for only OS softwares 
                                 D: drive for our development softwares like java , oracle, mysql, notepad++ 
                                 E:  used it for developening applications / programs
								 
							  So i am installing our java software under this location:
							  D:\Java\jdk-22
							 then click -> next -> close.
							 
						3. verify our software installed properlly or not 
							  go to our installation location  i.e D:\Java\jdk-22
							  
							  inside this folder :
							  we will have following folder 
							  
							  D:\Java\jdk-22\
							                      -> bin
													    *.cmd files which are related to JVM and JRE
													    javac
													    java
													    javah      
													    javaw
													    javap
													    javadoc
													  
												   -> lib 
												        *.jar        dependency jarfiles which are related to JVM and JRE
														 tools.jar   (this is one of imp jar file)
											            -> src.zip       it will contains all java source code which is already
													                 developed by java peoples so far. 
																	 
					if we want to open zip fiels we need unzip softwares like winrar or 7 zip etc . better to use the 7zip
					software to open src.zip files.
					
					4. set the PATH and JAVA_HOME environment variables :
					
					   PATH: path is a one of system environment variable by using this this variable we can register our
					   third party software locations with Operating system(OS).
					    press  window key word -> type or search for Environment variables -> Environment variables for your user
						-> under User Variable for K7iT 
						    path -> click edit -> click new -> copy and past our java software installed 
															   location still	bin folder  i.e
															   D:\Java\jdk-22\bin; -> click ok.
				      JAVE_HOME: this vraible will describes where is our java stalled with root folder directly
					             JAVA_Home variable should be set with java ROOT directory location;
								   i.e D:\Java\jdk-22
								   
				
				
				
				 JVM : Java virtual machine
				 JRE : Java Runtime Environment
				 LIB : Library 
				 BIN : Birany
				 SRC : Source code
				 rt  : Run Time 
				 JDK : Java development tool kit	
                 jar : java archive (stand alone application) (bunble of .class files)
                 war : web archive (web applications)(its a bundle of .class files and web_inf, web.xml)
                 ear : enterprize archive(enterprize applications) (its bundle of .classes , web.xml, weblogic server info)

                 javac : java compiler
                 cd : change directory 
 				 
						  
					  
	Write a HelloWrold program by using Java: 
	=========================================
	
	1. compose and saving a java program with .java ext
	2. compilating .java file
	3. running .class file
	
	1. Compose and saving :  if we want to compose any java program we need one editor like : 
	     notepad, notepad++, eclipes, STS, RSA, RAD, IntelliJ, visual studio etc . like this there lot of edittors in the market  to support java program developments.
     
	     here : notepad : is default editor which will come as part of OS instalation , so we dont need  any adiitonal software instalation. 
		 
		 but remaining editors like : notepad++, eclipsem, STS, RSA, RAD, IntelliJ etc  these are third party editors , if we want to use these edittors we need to install these editors seperatly. 
			 
	first we will start with notepad: 
	-> lets open  the notepad:
	    win + R -> type notepad -> press enter key.
		it will open the editor with white background :
		 then start composing our java HelloWrold program using class key word. 
		 
		  class HelloWorld{
 
			 public static void main(String args[]){

			  System.out.println("Hello world this is my first java program at K7iT");
			 }

		  }
		  
		  save the program with HelloWorld.java ; here .java is extendion type for java programs. 
		   save under: D:\lab\202401_JavaBatch\src
		                                    ----
		                                      -> HelloWorld.java
											  
			{ - brase
			( - parentheses 
			[ - bracket 
			
   2. compilation : if we want compile java program we need 2 things
                    a. command prompt
                    b. javac cmd 

   by usning javac cmd we can compile our java programs. this javac cmd will verify all rules and standards of 
   our program either we are following as same as java required standards. if we are not following proper rules 
   then we will get the errors. 
   
				syntax: javac  .java file name with extendion
	 
	 exmaple: javac HelloWorld.java
	 
	 if we want to compile our program we should compile from where our .java files are saved.
	     i.e D:\lab\202402_JavaBatch\src> 
											  
		 let open command prompt from our system 
		 
		    press win + R -> type cmd -> press enter key  - then it will open the command prompt with black color 
			background. by default it will loads current user location but we need to compile from our java file 
			locations 
			
			C:\Users\Dell>cd D:\lab\202401_JavaBatch\src

			C:\Users\Dell>D:

			D:\lab\202401_JavaBatch\src>javac HelloWorld.java

			D:\lab\202401_JavaBatch\src>
			
			here we get the next line without any error message means our program is compiled successfull . 
			
			how to confirm our program is compiled successfull or  not?
			
			go to our .java file location i. D:\lab\202401_JavaBatch\src and see there will be one more file got 
			created with the same of our class name  with .class extention. 
			
			input (*.java)  -> javac -> *.class (output)
			
			javac cmd will convert our .java file into a .class file.
			here .java file is also called  source code or high level code or user understand code. 
			     .class file is called as   byete code or intermediate code 
				 
	   3. running program: if we want to run the java program we need 2 things  
	               1.  cmd prompt  
				   2.  java cmd 
		   
		     let open the cmd prompt 
			  press win + R -> type cmd -> press enter key  - then it will open the command prompt with black color 
			background. by default it will loads current user location but we need to run from our .class file 
			locations 
			
			  syntax: java .class file name without extention
			   exm:   java HelloWorld
			   
			    C:\Users\Dell>d:

				D:\>cd lab\202401_JavaBatch\dev\src

				D:\lab\202401_JavaBatch\src>java HelloWorld
				Hello world this is my first java program at K7iT

				D:\lab\202401_JavaBatch\src>
				
				
				in case our program having some syntax errors compiler will identifies at compilation time only
				like below
				
				D:\lab\202401_JavaBatch\src>javac HelloWorld.java
				HelloWorld.java:3: error: ')' expected
				 public static void main(String args[]{
													  ^
				HelloWorld.java:5: error: ';' expected
				  System.out.println("Hello every one good morning to all")
																		   ^
				2 errors
				
				
				
		source code (.java): its user understandable code, or high level code or java
		      its writing in english
        byte code (.class): byte code or intermediate code
             it will be in alphanumeric and some special chars		
		binary code: its is low level code or system understandable code.		
				
				
			Note: once compilation done and .class file created from .java file, then our java file is not required for execution of program. we can delete .java file no problem. 
		
		de compiler : by uding de compiler we can convert .class file back to .java file 

        https://github.com/java-decompiler/jd-gui/releases/download/v1.6.6/jd-gui-windows-1.6.6.zip	
		
		to open our .class files with DeCompiler, first we need to make our .class fils as Zip file or .jar 
		
		class HelloWorld{
  
   public static void main(String args[]){

     System.out.println("Hello everyone , good morning to all,  this is my first java program");
     System.out.println("I have completed my first program successfully");
   }   
}

		class : one of the key word in java 
		HelloWorld : name of the class which is userdefined name 
		public : it is also one of the key word in java, it is called access specifier 
		static : it is also one of the key word in java, it is called access modifier
		 void : it is also one of the key word in java, it is called  return type
		main: it is one of the predefined method in java, 
			  it will use to execute any of the java code. 
			  java code execution will start from main(). 
			  wihtout main() we can't execute any of the code in java. 
		String : this is one of the predefined class in java, by using this class we can store alpha numeri values in double quotes. 
		args : it is called as paramter variable
		[] : this is callled Array Symbol.

		String args[] : this is one of String type array with  the name of args. 

		System : its also one of the prededined class.
		out: it is one of the static variable in side system class with PrintStreem class type.
		println(): this is one of the predefined method inside printstream class, which is using to print any of the message inside console form our java program as 
				   our program output. 

		key words: class, public, static, void -- in java all keywords will be lower case
		predefined class: String, System
		predefined method: main 


		
		
		Namaing Rules for class name in java:
		====================================
		1. class name should be start with capital letter.
		    class Hello{
			}
		2. if class name contains more than one word in each word first letter should be a capital
		   this case is called camel case.
		   
		     class HelloWorld{
			 }
			  
			 class GoodMorningAll
			 
			 lower case: helloworld
			 upper case: HELLOWORLD
			 camel case: HelloWorld
			
	    3. class name should not start with any number or special chars, except $ or undrscore(_).
		
		    class 123Hello{ // this is wrong pattern
			} 

			class #Hello{ // this is wrong pattern
			} 
			
            class $Hello{ // this is  fine
			} 	
			class _Hello{ // this is also fine
			}
			class -Hello{ // this is wrong pattern iphan 
			}
			
		4. we should not maintain any space between two words in the class name.but we can use 
		   undrscore(_). or camel case use can use .
		    
			class Hello World{ // wrong
			}
			class Hello_World{ // correct
			}
			
			class HelloWorld{ // correct
			}
			
		Q. how many types of classes we can defined in .java file ?
		
		    we can define 2 types classes in .java file 
			
			 1. default class : define a class without public key word
			    HelloWorld.java
				===============
				class HelloWorld{// this is called as default class
				
				}
			 2. public class: defind the class with public key word 
			    
				Car.java
				=========
			    public class Car{ // this is called as public class
				
				}
				HelloWrold.java
				-----------------
				public class HelloWorld{
				
				}
		
		How many classes we can keep in side one .java file?
		
		ans: we can keep N number of classses in one .java file if those class are not public classes.
		
		
		class Person{
		 public static void main(String args[]){
		   System.out.println("I am person");
		 }

		}

		class Address{
		 public static void main(String args[]){
		   System.out.println("I am address of person");
		 }
		}
		
		if we keep more than one classes in .java file  by using which class  name i should save my java file ?
		
		ans: we can use any name no problem like Person.java or Address.java or PersonAddress.java or XYZ.java 
		   
		    PersonAddress.java 
       
	   while compilation of .java file which is having more than one class how many .class files generate or what is the .class file name   ?
	   
	   src>  javac  PersonAddress.java 
	     this cmd will generate 2 .class files
		  1. Person.class
		  2. Address.class
		  
	   
	    ans: number of .class files are depending on the number of classes in .java file and name of the .class files are depending on the name of the classes but not depending on name of the .java file. 
		
		for example if we compile  PersonAddress.java  file it will generate 2 .class files under src folder with the name of  Person.clss and Address.class but not PersonAddress.class 
		
		Q: how to execute java files which is having more than one classes ?
		  ans: we should use corresponding .class file name which class we need execute but we dont need use .java file name for execution 
		   
		    for example from above program we got 2 .class files one Person.class and Address.class.
			
			if we want to execute person class then use 
			 java Perosn.class file name with out .class extention
			  src> java Person 
			  I am person
			  
			  src> java Address
			  I am address of person
			  
			  note: if we want to execute any .class file that class should contain main method else we cant execute any .class file with out main method even though .class file present. we cant start any execution in java without main method.
			  
	   Q.  if we try to run any .class file which is not having main method what will happen ?
	           Car.java
			   ===========
			  public class Car{
			  }
			  
			D:\lab\6th_batch\dev\src>javac Car.java
                compile success and it will create Car.class
				
			D:\lab\6th_batch\dev\src>java Car
			Error: Main method not found in class Car, please define the main method as:
			   public static void main(String[] args)
			or a JavaFX application class must extend javafx.application.Application
			
			1. jre will look for Car.clss inside current location i.e src by appending the .class for given class name i.e Car + .class  = Car.class
			then it will look for car.class inside src folder.
			
		    2. if Car.class file find in src folder  then JRE will load that .class file into memory for execution 
			
			3. JRE will create one thread to main method with name of main 
			    here main thread  responsibility is he has to execute what ever the code avaiable inside main method. 
		    4. main thread will look for  main method in that class
			5. if class is having main method then thread will load main method for execution and it will print the output 
			
			6. if main method not there in specified class.  he will return this error.
			
			     D:\lab\6th_batch\dev\src>java Car
				Error: Main method not found in class Car, please define the main method as:
				   public static void main(String[] args)
				or a JavaFX application class must extend javafx.application.Application

			
	  
	   Q: how many public classes we can keep inside one .java file ?
        ans: only one public class we can kepp. 
		
		in case of public class type we can able to keep only one public class inside one  .java file .
		or 
       we can't keep more than one public class in side one .java file
	   
	   why because in case public class,  .java file should be save with same as the public class name. here if we have only one public class then no problem
	   we can save our .java file name with that public class name.
	   
	   exm:
	         Car.java
			 =========
	    public class Car{
		   public static void main(String args[]){
			System.out.println("I am a car");
		  }
		 }
		 
		
		 

		 from above example my java file is having public class with the name Car, so i should save my java file with Car.java only, we should not use diffrent name incase public class i.e Xyz.java it is wrong 
		 
		    ==========================
					Xyz.java
			 =====================
				 public class Lorry{
				   public static void main(String args[]){
					System.out.println("I am a Lorry");
				  }
				 }
				 
		 ============================
 	 
			D:\lab\6th_batch\dev\src>javac Xyz.java
				Xyz.java:1: error: class Lorry is public, should be declared in a file named Lorry.java
				public class Lorry{
					   ^
				1 error	 
		 
		 
		 Q how many public classes we can keep one .java file or what is the java file we should give?
		 
		    A: we can't keep more than one public class in on .java file.
			
			Jagan.java
			===========
			public class Jagan{

			}

			public class CBN{

			}
		 
		 D:\lab\202402_JavaBatch\src>javac Jagan.java
			Jagan.java:5: error: class CBN is public, should be declared in a file named CBN.java
			public class CBN{
				   ^
			1 error
			
			CBN.java
			===========
			public class Jagan{

			}

			public class CBN{

			}
			
			D:\lab\202402_JavaBatch\src>javac CBN.java
			CBN.java:1: error: class Jagan is public, should be declared in a file named Jagan.java
			public class Jagan{
				   ^
			1 error
			
			So we due to this naming priority issue we can't keep more than one public class inside one *.java file.


			
		 
		 Q: i want to create  100 default access level classes, for this how many min *.java files required and How many max .java file required ?
			 
		options : a. min :1 and max : 1   b. min :1 max: 100  c. min:100 , max : 100 d. min :0 max:0
		
		ans:  b is the correct answer 
		  i.e we can keep all 100 classes in side one .java file or we can keep each class seperately in seperate .java file so  min 1 and max 100
		
		Q: if i want to create 100 public classes then how many min .java files required or how many max .java files required ?
		  
		  options:  a. min :1 and max : 1   b. min :1 max: 100  c. min:100 , max : 100 d. min :0 max:0
		  
		  ans: option c correct answer . because we cant keep more than one public class inside one .java
		  so 100 public classes means we need 100 .java files .
		  
		Q: if i want to create 100 public classes and 100 default class then how many min .java files required or how many max  .java files required .
		  
	    options:  a. min :1 and max : 1   b. min :1 max: 100  c. min:100 , max : 100 d. min :100 max:200
		    
		  
		Q: no of .classes are depending on ?
		  options: a. its depending on no of .java files
              	   b. its depending on no of classes in .java file 
		           c. its always produce only one .class file 
				   d.it will not depending on .java or .classes
		 
		 ans: b , no of .class files are always depending on  no of classes in .java file
		  
		 
		  
		  redirecting .class files into user specified location :
		  ===========================================================
	   
	   advisible because in case instead of deleting .class file if we delete .java file we will loose our source code.
	   
	   if we want to develop or write the java code again it will takes more time compare to creating .class file. 
	   
	   even though if .class creating also times more time it is not a burden for us. it is a burden to compiler, 
	   
	   so its better to seperate .java files and .class files. 
	   
	   as per folder name we given as src it means source code so we should keep only .java files inside src but for .class files we will create one more new folder wiht the name of "classes". inside classes folder we will keep .class files.
	   
	   but javac cmd by default it will create .class files under current location only i.e src folder where our .java files avaiable . but we dont want to create .class files under src folder, we need to create under classes folder 
	   
	   how to make java compiler to create .class files under user specified location ?
	   
	   by using -d option for javac cmd we can specifie where we need to create .class files by compiler.
	   
	   syntax: javac -d <.class file destination location > .java file name with extention
	   D:\lab\202402_JavaBatch\src 
	   example:  src> javac -d D:\lab\202402_JavaBatch\classes PersonAddress.java
	   
	   -d :   redirect , by using -d we	   	   Note: as of  now we are keeping .java files and .class files together inside same src folder. but its not 
 can redirect generated .class files into user specified location.
	   
	   while giving location to .class files we can use the 2 ways to specifie destination location 
	    
		1. absolute path : it is process of specifing the address from starting to ending always with complete address.
		 
		 2. real path or relative path: it is process of specifing destination address from our current location instead of the starting of address. 
			  
			  
			  Note: in order to reach classes folder location from src folder , just 2 steps are enough. 
			   1. one step backward  ( normaly in system we can use back word button or upward button), but from cmd prompt how to go one step back ward? 
				   
				   ans: in cmd propt if we want to go one step back ward we shld use ../ (double dot/)
				   
			   2. one step forward in to classes folder: in normal system means we can just double click on folder name  i.e classes folder. 
			     but from cmd prompt how to go to forward direction?
			     ans: in cmd prompt use /folder name (i.e /classes) we can go forward direction.
				 
				final realpath: ../classes 
				 
				 
				 cd : change directory 
				 ../ : one step back ward / previous location
				 ./ : current location 
				 cls: clear screen
				 mkdir : make directory or create directory 
				 
				D:\lab\202402_JavaBatch\src>cd ../

				D:\lab\202402_JavaBatch>cd ../
	
				D:\lab>

				D:\lab\202401_JavaBatch\src>cd ../classes

				D:\lab\202401_JavaBatch\classes>

				D:\lab\202401_JavaBatch\src>javac -d ../classes PersonAddress.java

				D:\lab\202401_JavaBatch\src>javac -d     D:/lab/202401_JavaBatch/classes PersonAddress.java

				D:\lab\202401_JavaBatch\src>javac -d ../././classes PersonAddress.java

				D:\lab\202401_JavaBatch\src>javac -d ../../classes PersonAddress.java
				The system cannot find the path specified.
				
				javac: directory not found: ../../classes
				
				Usage: javac <options> <source files>
				use -help for a list of possible options
				
				here : ../../classes folder we are going 2 steps back ward  means we will reach lab folder from src then 
				inside lab we are looking for classes folder , so its not available under lab folder so we are getting above error. 
				
				if we want to run the our .class files we need to change the location from src to classes :
				
				D:\lab\202401_JavaBatch\src> cd ../classes

				D:\lab\202401_JavaBatch\dev\classes>java Address
				I am address

				D:\lab\202401_JavaBatch\dev\classes>java Person
				I am person
				
				D:\lab\202401_JavaBatch\dev\classes>cd ../src

				D:\lab\202401_JavaBatch\src>javac PersonAddress.java

				D:\lab\202401_JavaBatch\src>
				 
				 Note: compilation has to done from src folder 
				       execution has to done from classes folder
					   
		by using javac cmd we are compiling only  single java file as of now, suppose if we want to compile 100 files, then we should use javac cmd 100 times, so it will be wast of our time to trigger javac cmd multiple times. 
		instead of compile single if we can able to compile all java files at a time it will save our time.
		
		is there any option to comiple all java or more than one files at a time?
		ans: yes we can complie more one file using *.java option instead of using 
		java file name after javac cmd.
		
		syntax: javac -d destinationlocation *.java 
		
		example :
		   src> javac -d ../classes *.java 
		   
		   this cmd will compile all .java files from src folder at a time and it will move .class files into classes folder .
		   
		   src> javac -d ../classes Person.java 
		   
		 this cmd will compile only Person.java file from src folder and it will move Person.class file into classes folder.
					   
					   
			classes and Objects:
=================================

class: it is a real time entity or class is a factory of objects. 

   it is act like catagory.  we can't touch or we cant see the catogies.

real time entity: the thing which is having properties and behaviours is called as real time entity.
this real time entity is represent as a class in java.

properties : the things which are using to identify or represents entity thse==ose are called as preoperties, 
tho properties are represents as a attributes in java ,
by using properties we can represents state of the object.

behaviours: the functionality or activities of enity are called as behaviours.

these behaviours of the entity are represents as methods in java.
by using methods we can achive the activies or functions of entity .

Object : instance of Entity is called as object. object is a real thing for that catagory, these objects we can see and we can touch it. but catogies we cant see or we cant touch.

in java we can create object by using "new" operator. 

   Syntax : 
         ClassName refVar = new ClassName();
		 
		  Person p1  = new Person(); -> person class object.
		  Animal a1 = new Animal();
		  Address a2 = new Address();
		  
		  here new Perosn() -> is called as person class object
		  p1 -> ref variable : if we want to do any comunication with that object we shoud use this ref var. 
		  new : key word it act like father 
		  className() : this is called as constructor , it is act like mother , it will give the initial state for the object. 
		  
		  
          
for example:
    if we take person as a entity 
	  it will contains following properties and behaviours
	  
	    properties :  age, name, height, weight, color , address etc...
		behaviours : running capacity, eating capacity , learning capacity etc.
		
		
		Person.java
		===========
		class Person   --- Entity/class
		{  
		   // attributes or properties
     		int age;
		    String name;
			double height;
			double weight;
			String color;	
			
			// method or behaviours
			public double getRunRate(){
			
			   double runRate = (height * weight) / age;
			   
			   return runRate;
			}	  
		   
		}
		
		PersonManager.java
		=========================
		public class PersonManager{
		   public static void main(String args[]){
		      /// create object for person class 
			  
			  Person p1 = new Person();  			  
			  
			  p1.age = 24;
			  //p1.age ="abc";//CTE
			  p1.name = "Tharun";
			  p1.height = 5.6;
			  p1.weight = 55.0;
			  p1.color = "brown";
			  
			  double tharunRunRate  = p1.getRunRate(); // 5.6*55.0/24 = 12.8 
			  
			  System.out.println("Tharun details");
			  System.out.println("Name:"+p1.name);
			  System.out.println("age:"+p1.age);
			  System.out.println("height:"+p1.height);
			  System.out.println("Weight:"+p1.weight);
			  System.out.println("color:"+p1.color);
			  System.out.println("RunRate:"+tharunRunRate);
			  
			  Person p2 = new Person();
			  p2.age = 24;
			  p2.name = "sai";
			  p2.height = 5.5;
			  p2.weight = 66.0;
			  p2.color = "gold";
			  
			  double saiRunRate  = p2.getRunRate(); //(5.5*66.0)/24 = 15.125
			  
			  System.out.println("Sai details");
			  System.out.println("Name:"+p2.name);
			  System.out.println("age:"+p2.age);
			  System.out.println("height:"+p2.height);
			  System.out.println("Weight:"+p2.weight);
			  System.out.println("color:"+p2.color);
			  System.out.println("RunRate:"+saiRunRate);
		   }
		}
		
		Here: 
		new : operator it will create new object with the help of constructor 
		. : access operator , it will help us to access any member of class like attributes or methods,  for either setting the values or getting or reading the values.
		
			   p1.name = "k7it"; // here we are accesing the name attribute from p1 object and setting value as k7it.
			   
			   sop(p1.name);// here we are reading  the name attirbute value from p1 object.
			   
	   Person() : this is called as constructor. 
			   
	    = : assigment operator : it will help us to assing right value into lefgt side variable or attribtes 
		
		+ : this operator will perform 2 operations for us 
		    1. if both the values are numeric it will give sum of those 2 values as result .
			  
			     10+20 -> 30
			2. if any one of the value is string or alphanumeric then it will perform 
			   just simple concatination of two values as one value .
			   
			    "abc"+10 = abc10
				"abc"+"xyz" = abcxyz
				"10"+"20" = 1020
				20+"abc" =  20abc
				
			// -> single line comment 
			/* */ -> multi line comment 
			
			/ -> backward slash
			\ -> forward slash
			
			
			
			
		class members: class is a entity, which is having the properties and behaviours. 
		    inside  class there are  mainly 4 members:
			 
   			  1. attributes / variables
			  2. constructors
			  3. methods
			  4. initialization blocks 
			  
			  
			  attributes: properties of the entity are represented as a attributes in side java class.
			  
			  attribute is one of variable type it is called as global variables 
			  
			  variable: variable is small memory space , it can store only one value. if we try to give the new value  then it will replace old values with new value. 
			  
			  syntax : 
			          dataType attributeName / variableName ;
					  
					  here 
					  
					  attributeName or variableName is act as name of our small memory space.
					  
					  dataType specifies which type value we can able to store inside that variable or attribute or that small memory space.
					  
					  ex: int age;
					      double height;
						  
						  here int , double are act as a datatypes.
					  
					  
					  Attributes naming rules:
					  =========================
					  1. attribute name should start with lowerCase
					     ext: String name; - correct
						      String Name: -> wrong
							  int age; correct
							  int Age; wrong
							  int aGE; wrong
						 
					  2. if attairbute is having more than one word, then from second
					      word onwards we should folllow camel case.i.e fro 2nd word
						  onwards every word should start with upper case.
						  
						  ex: String firstName; - correct
						  ex: String placeOfBirth; - correct
						  ex: String dateOfBirth; - correct
						      String firstname: -> wrong
						      String FirstName: -> wrong
							  
					   3. atribute name should not start with numner or any special chars 
					     excpet $ or _(under score). 
					  
					  ex: String _firstName; - correct
						  ex: String $placeOfBirth; - correct
						  ex: String dateOfBirth; - correct
						      String #firstname: -> wrong
						      String @FirstName: -> wrong
							  
							  
					  data types in java:
                      ==================
					  data type will deciede what type of value we can store in that variable or attribute.
					  
					  in java we have 2 types of datatypes.
					  
					   1. primitive data type
					   2. derived data type
					   
					   primitive data type: all predefind data types are called as primitive data types.
					   
					   in java mainly we have 8 primitive data types   
						 
						 byte  
						 short 
						 int 
						 long
						 float
						 double 
						 boolean -> this data type is used to store conditional values like true or false values. 
						  
						 char -> this data type we will used to store any single char using single quotes.
						  ex : char c = 'a';
						        char c1 = '7';
								char c3 = '#';
						 
						 here these 4 data types 
								 byte  
								 short 
								 int 
								 long   
						are used to store numeric values without decimal points, in this 
						4 data types defult one is int data type
						  
					    here these 2 data types 
								 float
								 double   
						 are used to store numeric values with decimal points,in this 
						2 data types defult one is double data type.
						
						 if we want to assing values to float data type we should use 'f' char end of the number else we can't give values to float data type.
						 
						 float f = 10.25f;  // -> correct
						 float f = 10.25;  // -> wrong
						 
						 but for double we can store both the values
						 
						 double d = 10.25f;  // -> correct
						 double d1 = 10.25;  // -> correct
						 
						 
						 special data type: .
						 =================
							String -> this data type we will used to store any alpha numeric values using double quotes.using string we can store multiple chars at a time.
						 
						  ex : String name = "k7it";
						        
						Note: this data type we can use it as both the ways like primitive data types and derived data types so its called special data type
						
						datatype  size      capacity  		 range     	 defaultvalue
========================================================================================
						byte (8bits)1byte 2^8	256			-128 to +127	    0
						short      2byte  2^16 65536	  -32768 to +32767	    0
						int        4byte      2power32	 -2^31 to (+2^31-1)		0
						long       8byte      2power64	 	 					0
						float      4byte      2power32	 	 					0.0f
						double     8byte      2power64	 	 					0.0
						boolean    1byte      256	 	 						false
						char       2byte      2power16	 	 					''
						String 													null
						 
						 
						 in above 6 data types from (byte to double) we can store lower capacity data type values into higher capacity data types but we can't store reverse way.
						 
						 int i = 10;
						 float f = i;//its possible
						 
						 shot s =10;
						 int i1 =s;// its possible 
						 
						 but 
						 
						 byte b = s; // not possible 
						 
						 int i2 = f;// not possible
						 
						 byte b1 = -128;
						 byte b2 = -200; //CTE 
						 byte b3 = 127;// ok 
						 byte b4 =  128; // CTE 
						 
						 		 
						 
						 
						 
						 Memory mesurments:
						 ===========================
						 unit 				size/capacity
						 ===================================
						 1bit 					binay bit either (0 or 1)
						 8bits					1byte = 2nibble
						 1024bytes				1KB(kilo byte)
						 1024KBs				1MB(Mega byte)
						 1024MBs				1GB(Giga byte)
						 1024GBs				1TB(Tera byte)
						 1024TBs				1PB(Peta byte)
						 1024PBs				1EB(Exa byte)
						 1024EBs				1ZB(Zetta byte)
						 1024ZBs				1YB(Yotta byte)
						 1024YBs				1BB(Bronto byte)
						 1024BBs				1GeopB(Geop byte)
						 
						 Geop byte is the highest memory.
						 
						 examples of data types:
						 =========================
						 class Test{
							 public static void main(String args[]){
							   
							int i =20;
							short s= 100;
							byte b1= 127;
							byte b2 = -128;
							byte b3  = 200;
							//Test.java:8: error: incompatible types: possible lossy conversion from int to byte
							//byte b3  = 200;
								//	   ^
								
							double d1 = 20.45;
							float f1 = 5.5;
							/*
								Test.java:15: error: incompatible types: possible lossy conversion from double to float
								float f1 = 5.5;
								
								for float datatype we can't assign decimal values directly, why bzc decimal values 
								are by default consider as a double values. 
								so if we want to give values for float type we should use 'f' char after the decimal number.
								
								like 
								
								float f1 = 5.5f;

							*/

							}
							}
							
					2.Derived Data Type or user defined data type : any data types which are created by user him self for his convinent requiments,
					those data types are called as derived data types or user defind data types.
					
				    or 
					
					the data types which are created by user is called derived data types or user data types. 
					
					or 
					Derived datatype also called class type. 
					
					name we can use it as 
					
					example : in java every java class name  we can use it as derived data types.
					
					for derived data type there 2 possible values 1. null value 2. corresponding class object. 
					
					here null means no value, in case of derived data type if we dont want to give any value then use null. 
					
					like in primitive numbers if we dont to give any value we will use 0. 
					
					
					Syntax of derived attribtes or variables: 
					
					ClassName refVar;
					// only declaration
					
					ClassName refVar = null;
					// declaration with null intialization 
					
					ClassName refVar = new ClassName(); 
					// declaration with initalization with corresponding class object. 
					
					for example:
					==============
					take the person class.
					
					class Person{
					  
					}
					
					Person p1 = new Person();
					
					here 
					
					p1 : is a variable or ref variable or attribute 
					
					Person:  is a data type for that p1 variable. 
					
					new Person() : it is value for that derived  person data types.


					int i = 20;
					int i = 0;// no value 
					
					Person p1 = null;//  no value in derived dataType
					
					

					ex2:
					class A{
					}
					A a1 = new A();
					A a1 = null;
					
					class Car{
					}
					Car c1 = null;
					Car c2 = new Car();
					
					by using class key word we can create our own data types what ever we want. 
					
					
                    possible values for derived data types:
					=========================================					
					for derived data types only 3 types values possible 
					1. null : null means nothing it will consider as no value
					    Perosn p1 = null;
					2. corresponding class object : it measn assinging same class objects into same class variavle types 
						Person p1 = new Person();
					3. corresponding child/ sub class objects 
							Parent ref = new Child(); -> correct possible
							Child ref = new Parent(): -> not possible
							
					in this 3 values null is the defualt value for derived data types.
					
					Person p1 = 20; // wrong 
					A a1 = 0; // wrong
					
					int i = null; // wrong
					int i = new Person();// not possible to assign person class obj into int variable.
					
					int k = 10.25; not possible we cant assigment double value into int variable 
					
					
					
					
					types of Attributes: 
					======================
							1. instance Attributes or non static attributes: the process of defining the attributes without
							using static key word those attributes are called as instance attributes or non static attributes.
							
							syntax : 
									dataType attributeName / variableName ;
					  
							-> instance attributes are specific to each Object, it means every object will maintain 
							seperate copy of values, if we change the value in one object it wont effect on another object.
							
							-> instance attributes are store where the object is store / instance attaributes will store inside object memory space. 
							   
							-> instance attributes will specifies state of the object.
							
							-> instance attribtes are object level attairbutes
							
						    2. static Attributes or class level attributes : the process of defining the attairbutes with static ket word those are called as static attributtes.
							   
							   syntax: 
							        static dataType attributeName;
									
						 -> static attributes are common to all objects, it means if  we change value in object it will effect 
						 on all other objects as well.
						 
						 -> static attaributes are called as class level attributes so it will store under class memory location
						 
						 
						 example: person is one entity
						    
							 properties :  age,name,address,color, height, weight, gender, foodtype, legs, hands , eyes etc..
							 
							 
						instance  or specific to each obeject :
                            age
						    name
							address
							gender
							color
							height
							weight
						
						static or common to all objects :
						
						foodtype
						legs
						hands
						eyes
						
						
						class Person:
						{ 
						  int age;
						  String name;
						  String address;
						  char gender;
						  String color;
						  double height;
						  double weight;
						  
						  static String foodtype
						  static int legs;
						  static int hands;
						  static int eyes;						
						}
						
						
						Example:
					class Person1{

					  int age;
					  String name;
					  static String food;

					 public static void main(String args[]){

						Person1 p1 = new Person1();
						p1.age   =  27;
						p1.name  =  "k7iT";
						p1.food  =  "rice";

						Person1 p2 = new Person1();
						p2.age   =  37;
						p2.name  =  "java";
						p2.food  =  "grass";
						p2.name  =  "mysql";
						
						System.out.println("p2 details");
						
						System.out.println(p2.age);//37
						System.out.println(p2.name);//mysql
					    System.out.println(p2.food);// grass
						 
						 
						System.out.println("p1 details");

						System.out.println(p1.age);//27
						System.out.println(p1.name);//k7it
						System.out.println(p1.food);// grass

						

						p1.food  = "raw meat";
						
					    System.out.println("p1 and p2 after update from p1 details");
						System.out.println(p2.food);// raw meat
						System.out.println(p1.food);//raw meat

						Person1 p3 = new Person1();
						
					    System.out.println("p3 details");
					    System.out.println(p3.age);// 0 
						System.out.println(p3.name);// null 
						System.out.println(p3.food);//  raw meat

					   

						
					  }
					}

					out put:
					p1 details
					27
					k7iT
					grass
					p2 details
					37
					java
					grass
					p1 and p2 after update from p1 details
					raw meat
					raw meat
					p3 details
					0
					null
					raw meat
												 
										   
										  
		Note: all atributes are having default value concept, if we dosen't provide any value for the attaributes, then
				it will initialize with default value for that attribute based on corresponding attribute data type.
    
                byte , short, int, long : dafult value : 0
                float, double : default value 0.0				
                boolean : default value flase			
                char : default value : empty char ''
				
                any derived data type : default value : null
				
		String is a derived data type only so we are getting null for string type variables as defult values, but it will support like primitive values also. thats the reason we are calling string class as a special data type.

 		
		Note:

		static attairbutes are common to all objects , so it will maintain only one copy for all the objects. so lastest modification will effect for all the objects, 
		
		but 
		
		instance attributes not like that, each object will maintain sepearte copy of values. so if one obj value will modify it wont effect on other object instance attribute values. 
				
		Memory Management :
		===================
		
		 in java we have 2 types of memories 
			1. stack memory
			2. heap memory 
			
			stack memory : this is one type memory in java ,it will works based on  First In Last out
			algoritham (FILO) or Last In First Out algoritham(LIFO).
			
			Queue: FIFO or LILO 
			
			java will use the stack memory for executing all methods , constructors , any
			executable blocks and local variables or ref variables.

            in side stack memory if any of the member will come for execution it will occupie the some memory space, once the execution over it will remove automatically from stack memory and it will release occupied space.
			
			it means, the allocation of memory and releasing of memory will happen automatically inside stack memory. 
			
			Heap Memory : java will use the heap memory for storing all class files , objects, attributes.

			in side heap memory use have rights to load the .class files or create the objects,
			but 
			we dont have rights to
			delete or clean those members from heap memory even after useage completed.
			
			if any of the object usage is completed or the object which dosent have any 
			reference from stack to heap memory then those ojects are called as unused objects 
			or orphan objects or nullify objects, these types of objects are delete by
			one special thread called Garbage collector(GC). 
			
			GC is having the responsibility of deleting the un used objects from heap memory. when ever he will come for execution. 
			
			in case memory is getting full before GC is coming for execution , that 
			user can request GC to come for execution using 2 ways 
			    1. System.getRuntime().gc();
				2. Runtime.gc();
			but we can't compile the GC to come for execution. so even though if we request GC to come for execution there is no guarentee he will come for execution. he may o maynot accept our requests. 
			
			GC will works based Mark and Sweep algoritham. it means when GC will come for execution 1st time if he finds any unused objects he will mark those objects and he will go, when 2nd time gc will come for execution he will
			delete all object  which are already marked and if he find any new objects those objects he will mark newly and he go away.
			
			how many ways we can access the non static Attributes:
			======================================================
			
			non static attributes we can access 2 ways
			  1. by using Object : create the obj without reference variable that object is called as  direct object.
			  
			   by using that direct object also we can instance attributes. 
				
				in this case the life time of the object is only single line. 
				
				-> so in this case -> by using one object we can able access only one attribute from that class. 


               Person p1 = new Person(); //create obj with help ref var 
			   
               new Person(); //this is called direct object or create object without ref var.			   
			  
			  class Person{
			     int age;
				 String name;
			  }
			   class PersonManager{
			      public static void main(String args[]){
				     
					sop(new Person().age); //0 
					// direct object usage without ref variable.
					/* above one line is equals to below 3 lines of code.
					   Person temp1 = new Person();
					   sop(temp1.age);// 0
					   temp1 = null;
					*/
					sop(new Person().name);// null
					 /* above one line is equals to below 3 lines of code.
					   Person temp2 = new Person();
					   sop(temp2.name);
					   temp2 = null;
					*/
					// here temp1 , temp2 variables life time is only single line.
					// to access 2 attributes we are creating 2 objects. 
				  }
			     
			   }
			  note: objects which are creating without ref variable those objects are 
			  called as temporary objects. those objects life time is only single line.
			  
			  2. by using Obj reference varaible 
			  
			  class Person{
			    int age;
				String name;
			  }
			  class Manager{
			    static public void main(String[] args){
				
				Person p1 = new Person();
				sop(p1.age);//0
				sop(p1.name);//null
				sop(p1.age);//0
				sop(p1.name);//null
				/*
				 here p1 is a ref variable for person class object, p1 scope is entire 
				 main method scope. we can use p1 object any where in the main method how
				 many times you want to use it.
				*/
				
				p1.age = 25;
				sop(p1.age);// 25
				p1.name = "k7it";
				sop(p1.name);// k7it
				}
			  }
			
				How many ways we can access static attribtes:
				==============================================
				static attairbutes we can access 3 ways 
				1. using direct object 
				2. using object ref varable
				3. using direct class name
				
				-> static attributes are called as a class level attairbutes.
				
				so as per static attribtes  rules static attribtes should be access by using class name it self. we dont need to create any objects to access the static attributes. 
				
				-> even though if we try to access the static attribtes by using object or object ref var, at the time copilation it will replace object or obj ref variable with corresponding class name. 
				
				ex1 :// access static attributes using class name 
                 class Person{
				    static int noOfLegs;
					static String foodType;
				 }	

                 class PersonManager{
				    static public void main(String []args){

						  Person.noOfLegs = 2;
						  Person.foodType = "rice";
						  sop(Person.noOfLegs);// 2
						  sop(Person.foodType);// rice
					}
				 }	

			ex2 :// access static attributes using direct object  
                 class Person{
				    static int noOfLegs;
					static String foodType;
				 }	

                 class PersonManager{
				    static public void main(String []args){

						  new Person().noOfLegs = 2;    // -> Person.noOfLegs=2;
						  new Person().foodType = "rice";//-> Person.foodType = "rice";
						  sop(new Person().noOfLegs);// 2//-> sop(Person.noOfLegs)
						  sop(new Person().foodType);// rice//sop(Person.foodType);
					}
				 }	

				 
				
				Note: in case of static attribtes we should access static attairbute by using class name ,if we try to access using obj or obj ref var it will 
				replace with corresponding class name at the time of compilation by complier. 
				
				ex2 :// access static attributes using  object  ref var
                 class Person{
				    static int noOfLegs;
					static String foodType;
				 }	

                 class PersonManager{
				    static public void main(String []args){
						  Person p1 = new Person();
						
						  p1.noOfLegs = 2;    // -> Person.noOfLegs=2;
						  p1.foodType = "rice";//-> Person.foodType = "rice";
						  sop(p1.noOfLegs);// 2//-> sop(Person.noOfLegs)
						  sop(p1.foodType);// rice//sop(Person.foodType);
					}
				 }	
				
				
				constructor : 
				==============
				constructor is one of executable block inside the java class with same name of class name, it is used to creating objects for	that corresponding class and providing initial state for that object. constructor doent have any return type.
		
				-> the process of defining a block with the same name of class name wihtout return type is called as a constructor.
				-> using constructor we can create object and we can give the initial state for objects.
				
				-> 	for every object creation constructor will execute. 			
				
				   syntax: class ClassName{
				         // declare attribtes
						 
						 // declare constructor
						 
						 ClassName(){
						 
						 /// body of the constructor
						 
						 }
						 
						// () : constructor signature 
						// ClassName : constructor name 
						// {} : constructor body
				   }

				Ex:
				class Person{
				 Person(){
					System.out.println("I am in Person class constructor");
				  }
				}

				class PersonManager{
				  public static void main(String args[]){
					
				  Person p1 = new Person();//  here new Person(); it is called as, calling statement for person class constructor 
				  Person p2= new Person();//  here new Person(); is called as calling statement for person class constructor 
				  Person p3 = new Person();//  here new Person(); is called as calling statement for person class constructor 
				  }
				}
				o/p: 
				D:\lab\202401_JavaBatch\src>javac -d ../classes Person1.java

				D:\lab\202401_JavaBatch\src>cd ../classes

				D:\lab\202401_JavaBatch\classes>java PersonManager
				I am in Person class constructor
				I am in Person class constructor
				I am in Person class constructor

				D:\lab\202401_JavaBatch\classes>
				
				
				
				Note: for every object creation constructor will execute once, without executing constructor we can't able to create object for any class. 
				
				Note: Contructor only we will create the object and it will give the initial state for the object. 
				contructor will act like a mother for objects .
				
				instalation of notepad++:
				==========================
				
				notepad++ is a advance editor for developing java programs, it will
				give better suggestions and look and feel for developers while writing the java code.
				
				1. download notepad++ software from this url :			
								
				inside constructor only we will get all default values for instance attributes.
				
				1. creating object
				2. providing initial state for object with default value concept.
				
				
				for every object creation corresponding class contructor will execute once :
				
				lets create 4 objects for person class:
				
				class Person1{
						Person1(){

						System.out.println("I am in person class constructor");
					   }

					 public static void main(String args[]){

						 Person1 p1 = new Person1();
						 Person1 p2 = new Person1();
						 Person1 p3 = new Person1();
						 Person1 p4 = new Person1();   
					  }
					}
				o/p: 
				I am in person class constructor
				I am in person class constructor
				I am in person class constructor
				I am in person class constructor
                
				Note: if we want to create any object we need constructor. without constructor we cant create any object.
				Person.java       javac       Person.class 
				================================================
				class Person                  class Person extends Object
				{								{
				                                   Person(){ // default constructor
												   }
				
				}								}
				
				
				
				
				  Person.java               javac->        Person.clss
				  ===========================================================
				class Person{                          class Person extends Object {
				 int age;								   int age;
														Perosn(){
														  // default constructor
														}
				}								       }
				
				
				
				  Person.java               javac->        Person.clss
				  ===========================================================
				class Person{                          class Person extends Object {
				 int age;								   int age;
				person(){								Perosn(){
System.out.println("person constructor");       System.out.println("person constructor");
														}
				}								       }
				
				class PersonManager{
				
				  public static void main(){
				   Person p1 = new Person();// this is calling stmt for person class no arg constructor.
				   
				  }
				}
				
				Note: we cant create any class without constructor, even though if we create any class without constructor,
				at the time of compilation java compiler will keep the one deafult constructor with no arg signature.
				
				Note2:Java comipler will create the default constructor if and only if there is no constructor in side our class.
				
				Q: is it possible to create empty class in java ?
				
				
				 ans : no, why beacuse even though if we create class without any members like bellow, at the time of
				 compilation java compiler will add one default constructor into our .class file like below
				 
				 Perosn.java						Person.class
				 class Person                     class Person extends Object
				 {									{
				                                      Person(){
													          
								-->javac -->				}
				           
				 }	                              }
				
				Constructor overLoading: the process of keeping more than one constructor in the same class with different 
				signature is called as constructor over loading. 
				
				  exm:
				  
				    class Person{
					
					
					    Person(){// this is called defination for no arg constructor
						  System.out.println("No arg constructor");
						}
						
						Person(int cash){// here signature expects what is the inputs we are expecting from caller
						  System.out.println("int type constructor");						
						}
						
						Person(int cash,String party){ // this constructor expecting 1 int and 1 string
						  System.out.println("int - String type constructor");				
						}
						
						Person(int cash,String party,String gift){ // this constructor expecting 1 int and 2 string values 
						  System.out.println("int - String -String type constructor");				
						}
						
						Person(int cash,int i,double d){ // this constructor expecting 2 int and 1 double values 
						  System.out.println("int - int -double type constructor");				
						}
						
						static public void main(String args[]){
						  Person p1 = new Person(); // this is called as  calling statement for no arg constructor
						  
						 // Person p2 = new Perosn(int cash);
						 // Person p2 = new Perosn(int cash,String party);
						 
						 Person p2 = new Perosn(100);
						 Person p3 = new Perosn(10,"drink party");
						 Person p4 =  new Person(10000,"coffee party", "mobile");
						 Person p5 =  new Person(10,"abc", "xzyz");
						 Person p5 =  new Person(1,20, 5.7);
						 
						 
						 Person p6 =  new Person(100,2000, "String");//CTE
						 // this is a calling stament for int,int,String type constructor but there is not defination this
						 // calling statement so we will get the compile time error.
						  
						
						}
					}
					
					output:
					
					No arg constructor
					int type constructor
					int - String type constructor
					int - String -String type constructor
					int - String -String type constructor
					int - int -double type constructor
					
					
					
				 class Person{
				 
				 Person(){
				  System.out.println("No arg constructor");
				 }
				 
				 /* 
				  Person(){
				  System.out.println("No arg constructor");
				 }
				 */
				    
		}	  
					Perspon p1 = new Perosn();//this is the calling stmt for no arg constructor	, for this one calling 
					//	 there are multiple defination stmt , in java it is not acceptable it will cause the ambiguiting error
                Note:  for every calling there should be a only one defination statement. 
               // if we want to make compilation successfull we need to remove either one of the no arg constructor				
										  
			  
			  
			  class A{
			    int i;
				int i;//CTE // duplicate attairbute
				String name;
				int name;//CTE duplicate atribute 
			  //Note: in java we cant keep same name for more than one attribte in the same scope. 
			  }
			  
			  class A{	  
			      A(int i){
				  SOP("int constructor");
				  }
				  
				  A(double i){
				  SOP("double constructor");
				  }
				  A(String i){
				  SOP("String constructor");
				  }
				  /*
				  A(int i){ name of constructor, list of arguments, type of args , order args matched with 1 constructor
				  SOP("int constructor");
				  }
				  */
				  A(int i, String s){  //name ,2, int and string, int-string
				  SOP("int- String constructor");
				  }
				  
				  A(String i, int s){ //name ,2 , int and string, String -int
				  SOP("String- int constructor");
				  }
				  
				/*  A(String i, int s){//name ,2 , int and string, String -int
				  SOP("String- int constructor");
				  }*/
				  
				   A(String i, int s, float f){
				  SOP("String- int -float constructor");
				  }			  
			  
			  }
			     
			  
		how to find the duplicate constructor or constructor overLoading rules: 
       ==========================================================================
      1. name of the constructor
      2. list of arguments or no.of arguments
      3. type of arguments
      4. order of arguments
	  
	   class Person{
	   
	     int age;
		 String name;
		 double height;
		 double weight;
		 
		 Person(){
		   System.out.println("no arg constructor");
		 }
		 
		 Person(int i, String s, double d1,double d2){		 
		     age = i;
			 name  = s;
			 height = d1;
			 weight = d2;
			System.out.println("int-str-double-dobule type constructor"); 
		 }
		 public static void main(String args[]){
		 
		    Person p1 = new Perosn();
			
			System.out.println(p1.age);//0
			System.out.println(p1.name); //null
			System.out.println(p1.height);//0.0
			System.out.println(p1.weight);//0/0
			
			p1.age = 25;
			p1.name = "K7iT";
			p1.height = 5.5;
			p1.weight = 55.76;
			
			System.out.println(p1.age);// 25
			System.out.println(p1.name);//K7iT
			System.out.println(p1.height);// 5.5
			System.out.println(p1.weight);// 55.76
			
			Person p2  = new Person(27,"nani",5.7,75.0);		
			
			System.out.println(p2.age);// 25
			System.out.println(p2.name);//K7iT
			System.out.println(p2.height);// 5.5
			System.out.println(p2.weight);// 55.76
				
			
		 }
		 
		 
	   }
	  
	  output:
			no arg constructor
			0
			null
			0.0
			0.0
			25
			K7iT
			5.5
			55.76
			int-str-double-dobule type constructor
			27
			nani
			5.7
			75.0
			
			
		Example 2:
				  class Person{
				   
					int age;
					 String name;
					 double height;
					 double weight;
					 
					 Person(){
					   System.out.println("no arg constructor");
					 }
					 
					 Person(int age, String name, double height,double weight){	
						/*
						  here local variables and global variables are having the same names, then how to 
						  differentiate the local variables to global variables . in java there is a one key word
						  called this  operator to identify the global variable. so we can this 
						  this operator prefix for globale variable to differentiate from local variables.
						  
						  here this is act like a dynamix ref variable to current object, current object for which object
						  creation we are calling this constructor that object act like current object.
						  
						  
						*/
						 this.age = age;
						 this.name  = name;
						 this.height = height;
						 this.weight = weight;
						System.out.println("int-str-double-dobule type constructor"); 
					 }

					 public static void main(String args[]){
						Person p2  = new Person(27,"nani",5.7,75.0);		
						System.out.println(p2.age);// 25
						System.out.println(p2.name);//K7iT
						System.out.println(p2.height);// 5.5
						System.out.println(p2.weight);// 55.76
						
						Person p3  = new Person(47,"Hero",6.5,150.0);		
						System.out.println(p3.age);// 47
						System.out.println(p3.name);//hero
						System.out.println(p3.height);// 6.5
						System.out.println(p3.weight);// 150.0
						
						
					 }
					 
				   }		
	  
	  Constructor chaining:
	  ====================
	      it is a process of invoking one constructor to another constructor by using this() or super() without using new operator is called as constructor  chanining. 
		  
		  here
		  this(): it is act as calling stament for one constructor to another constructor with  in the same class .if we have such kind of requiments then we can use this() statement.
		  
		  super(): its is act like calling statement for sub class constructor to super class constructor. if we have such kind of requiments then we can use super() statxement.
		  
		    
			exm:
			  A.java                        A.class
			 class A {                  class A extends Object{
			            -> javac ->                   A(){
														super();
			}								}            
											}
			 in java every class should have parent class or it should be child of any other java class. in case if any of class 
			 dosent have parent then java compier will make object class is a parent for that class using extends key word.
			 at the time compilation
			
			 
		compiler will verify all these steps while converting .java file into .class file
		
		 1. it will verify is our code as per the java standards or not  i.e it verify all syntax errors and is there proper open statemensts and corresponding closing stmts or not, etc ..
		 
	     2. it will verify , is this class having parent class or not, if not -> then it will make this  class is a sub class to object class. 
		 
		 3. it will verify this class is having any constructors or not, if there is no constructor in side that class then it will add one default constructor i,e no arg constructor.
		 
	     4. it will verify what is the 1st stement inside the constructor either super() or this(). if there is no super()
		  or this() statemensts then it will keep super() as first stament in side constructor. 
		  
		 Note: super() or this() should be first stament of constructor, we can't keep these statemensts second line or 
		 third line in the constructor. so if we want to use super() inside constructor then we cant use this() in side same
		 constructor. beacuse both functions are should be at first line only. so either one statement only possible 
		  at a time. 
		  
		  if user want to use either super() or this() he have 2 options , but comipler will have only one option that super().
		   compiler always keeps only super() at first line of constructor if and only if there is no super() or this() 
		   statemensts. compiler never keeps this() statemensts at first line of constructor.
		   
		   
		   		class A {		   
		     A(){
			   System.out.println("no-arg");			    
			 }			 
			 A(int i){
			  this();// this is calling stmt for one constructor to another constructor with in the same class. it will call no arg constructor.
			  System.out.println("int constructor with value of :"+i);
			 }			 
			 A(String str){
				this(30); // this ia calling for int type constructor
			  System.out.println("Sring constructor with value of:"+str);
			 }
			A(int i,String str){
				this();
			  System.out.println("int-Sring constructor with value of:"+str+":"+i);
			 }			 
			 public static void main(String args[]){
			System.out.println("Now we are creating object using no arg"); 			   
			   A a1 = new A();// no arg 
				System.out.println("Now we are creating object using int type constructor");
				A a2 = new A(10);// no arg and "int constructor with value of :10
				System.out.println("Now we are creating object using String arg");
				A a3 = new A("k7it");
				System.out.println("Now we are creating object using int and string");
				A a4 =  new A(10,"Prasad");
			 }
		   }
		  output:
			Now we are creating object using no arg
			no-arg
			Now we are creating object using int type constructor
			no-arg
			int constructor with value of :10
			Now we are creating object using String arg
			no-arg
			int constructor with value of :30
			Sring constructor with value of:k7it
			Now we are creating object using int and string
			no-arg
			int-Sring constructor with value of:Prasad:10

   example: 
   
     class A {
		   
		     A(){
			   System.out.println("no-arg");
			    this(20);// this is the calling statment for same class constructor with
                     // int type parameter.
			 }
			 
			 A(int i){
           this("Lucky");// this is the calling statment for same class constructor 
                       //with String type parameter.
			  System.out.println("int constructor with value of :"+i);
			 }
			 
			 A(String str){
			  System.out.println("String constructor with value of:"+str);
			 }
			 
			 public static void main(String args[]){
			 
			    A a1 = new A();
				//A a2 = new A(10);
				//A a3 = new A("k7it");
			 
			 }

}

output: 

D:\lab\202401_JavaBatch\src>javac -d ../classes A.java
A.java:5: error: call to this must be first statement in constructor
                            this(20);// this is the calling statment for same class constructor with
                                ^
1 error

     Exp3: 
	    class A {
		   
		     A(){
			    this(20);// this is the calling statment for same class constructor with
                     // int type parameter.
				 System.out.println("no-arg");
			 }
			 
			 A(int i){
           this("Lucky");// this is the calling statment for same class constructor 
                       //with String type parameter.
			  System.out.println("int constructor with value of :"+i);
			 }
			 
			 A(String str){
			  System.out.println("String constructor with value of:"+str);
			 }
			 
			 public static void main(String args[]){
			 
			    A a1 = new A();			
			 
			 }
		}
		
		
		
		Output:
		D:\lab\202401_JavaBatch\dev\classes>java A
			String constructor with value of:Lucky
			int constructor with value of :20
			no-arg
	 
	 Note: here i am creating only one object using no arg constructor but all 3 constructors are executing as part this
	   single object creation, because of we are using the constructor chaining with the help of  this() statemenst.
	   
	   erlier for each object creation only one corresponding constructor was exected from our class. 
	   
	   
	   How to install the notepad++: this is a advanced editor for java development programs, 
	     it will give better suggesion for developer while writing the code with different colors identiifcations for 
		 java key words ans java classes , proper identification for every open braces with corresponding closing braces etc.
		 
		 downloan notepad++ latest verson : https://notepad-plus-plus.org/downloads/
		 
		 
	   
	 super(): by using super() we can invoke super class constructor from sub class constructor. 
		  in java every class is sub class of Object class or Object class is act like master super class for all java classes.
		   if our class not extending any other class java compiler will automaticaly makes our class will extends by 
		   Object class.
		   A.java                         A.class
		    class A{    			 class A extends Object {
											A(){
					    -> javac ->		     	 super();
											}
			}							}
			
		   
		   
		   
		  
	    here: Object class is called as super class or parent class or master/general class  
		and  A class is called as  sub class or child class or specialization class. 
		
		
		here Object class is predefinf java class its avaiable under java.lang package under src folder. in side object '
		there is only one constructor i.e default constructor. but it wont have any sop statment.
		
		   public class Object{
		   
		   public  Object(){
				  /// Object no arg constructor
				}
		   }
		   
		   Note: for every object creation minium 2 constructor will execute one is from corresponding class constructor
		   second one from object class no arg constructor. without executing Oject class constructor we cant create 
		   any class objects. 
		   
		   example:
		    Person.java                                  Person.java
		   
		    class Person {                               class Person extends Object{
			 
			    Person(){                                   Person(){
			     System.out.println("no arg");                super();// calling statemenst for Object class no arg Constructor
			   }                                              System.out.println("no arg"); 
			                                                  }
			   Person(int i){ 								Person(int i){
					System.out.println("int constructor");   super();  // callint statement  for Object class no arg Constructor
															 System.out.println("int constructor");
			   }											}
						
			}										      }
		   
		   
		   
		   
		   class PersonManger{
		   
		     public static void main(String args[]){
			 
			    Person p1 = new Person();// this is a calling stmt person class no arg constructor
				Person p2  = new Perspon(10);//  this is a calling statement for int type constructor in side person class
			 }
		   
		   }
		   
		
		
        Memory Managemnet: in java we have 2 types of memory 
		1. stack : it is using for executing all types executable blocks (constructor, methods,initialization blocks etc) and
		    all local variable and ref varables and parameter variables all are store under stack memory.
			
			stack memory will works based Fist in last out algorithem (FILO) or Last In First Out Algorithem(LIFO) 
			-> inside stack memory any of the member will finish the executuon it will remove automaticaly from stack memory. 
			 once that member removed from stack all the variable or ref variavle which are created as part of that those also
			 will remove automaticaly. 
			
		2. heap memory:  .class files , Objects and atributes(static or non static/instance) will store under heap memory. 
		   if we want to access any of the object from heap memory we should use ref variables from stack memory. wihtout using
		   ref variables we cant access object from heap momory. 
		   
		   -> in side heap memory if there are any objects which dosent have direct link from stack to heap memory, then those object are 
		       called as abandoned objects or nullify objects or orphan objects . 
			   
		   -> in side heap memory un used objects will not delete immediately once usage is over like stack memory. 
		   -> we can able to create the object inside heap memory, but we dont have rights to delete or clean the objects 
		      from heap memory. 
			  
			Who will delete un used objects from heap memory:
			=================================================
			 there is a one special daemom thread in java with the name of Garbage collector (GC). this thread will take care 
			 about deleting the unused objects from heap memory. 
			 
			 but we dont know when he will come for  executuion / cleaning unused objects .
			 
			 gargabe collector will works based on mark and sweap algoritham , it means when ever garbage collector will 
			 come for execution first time it will identify the un used objects or orphan objects it will mark those objects 
			 and he will call finalized() method from object class and he will go.  but it wont delete immediately.
			 
			 when second time GC will come for executuion it will delete all marked objects automaticaly and he will look for
			  is there any new object are eligible for gargabe collector. if he finds any orphan or nullify object he will mark
			   and call the finalized() from object class and he will go away. when next he will come for execution he will delete
			   these newly marked objects.
			   
		    -> we can make a request for garbage collector but we cant command or demand the garbage collector. even though 
			if we make request there is no guarentee GC will come execution. 
			
			  how to make request for G.C:
			  1. System.gc();
			  2. Runtime.getRuntime().gc();
			  
			  
			  variables and its initalization: 
			  ================================
			  
			         in java we have maily 4 types variables 
					   
						1. global variables
						2. local variables
						3. parameter or argumer variable 
						4. conststans variable 
						
						
			       1. globale variables: the varaibles which are declared under class level scope those are called as 
						global variables or attributes or properties . 
						  
						    these globle variables are again 2 types :
							1. instance attaributes / non static attaributes: these atribute are part of the object , where objetc is 
							 present thse instance atributes also present there only.  i.e objects are store under heap memory so our 
							  instance atributes also store under heap memory with in the object allocation memory space.
							  instance atributes are specific to each object, i.e every object will have seperate copy of instance atribute
						      if we change the value of instance attairbute inside object it will  not effect on other object.
							  
							  -> instance attributes should be access by corresponding class Object or object ref variables
							    without object there is no instance attributes.
								
							-> instance attribtes are having default value concept it means if we dont provide the values for instance atributes
                               while creating object inside constructor will proide the default values  based on  attribute datatype
							    after executing the super() but not after exectuing this().
								
						   -> instance attributes are initialize with default for every object creation. 		
							  
							2. static attairbutes / class attaributes : static atributes are common to all objects , for all objects static 
							 attaributes maintain only one copy. if once object will update the value for static attaributes it will effect 
							 for all other objects as well. 
							 
							 -> static atributes we can access direcly  by using class name. we dont need to create object and we dont need use 
							    obj ref variable to access static atributes. why because static atribute are part of the .class file
								
								
						    -> even though ig we try to access the static attributes by using Object or Object ref variable at the time 
							   of compilation compiler will replace object with corresponding class name and ref varables with corresponding variavle 
                               dataType.							   
							   
							 -> static atributes also having default value concept , but it will initialize with default value 
							    at the time first time when our .class file will load into the heap memory. static attribtes will'
								initalization be default value only once entire execution time.
								
								 Person.java                                        Person.class
								class Person{                                  class Person extends Object{
								    int age;  										int age;  
									String name;									String name;
									static int legs;  								static int legs;
									static String food;								static String food;
									Person(){										Person(){
									  System.out.println("No arg");					  super();
																			          -> initalization instance Attributes (IIA)
									}                                                 -> body of the constructor
																				    }
									public static void main(String args[]){      public static void main(String args[]){
									   
									  Person p1 = new Person();							 Person p1 = new Person();
									  
									   System.out.println(p1.age);                      System.out.println(p1.age);
									   System.out.println(p1.name);					    System.out.println(p1.name);
									   System.out.println(p1.legs);                     System.out.println(Person.legs);
									   System.out.println(p1.food);						System.out.println(Person.food);
									   
									}												  }
									
								
								}                                                  }
							   
							   
							 
							   2. local variables :  it is varaible which are declared under any of the executable blocks 
							     like constru, methods, or initalization blocks or delcaring under memeber of the classes those
								 variables are called as local variables . 
								  class A{
								  
								     int i =10;
									 
									 public static void main(String args[]){
									 
									    int k =10   
									 }
								  }
								  
								  
								  -> in above program varaible i is called global varable and k is called as local variable to main method.
								  
								  class A{
								  
								     int i=10;
									 
									 A(){									 
									 sop(i);		// 10								 
									 }
									 A(String s1){
									 
									 sop(i);		//10
									 }								 
									 
								  }
								  
								  class A{
								  
								    A(){
									  int k =10;// here  k is act like local variable to no arg constructor.
									  sop(k);//10
									  k =k-2;
									  sop(k); 8
									}
									
									A(String s){
									
									 sop(k);//CTE 
									}
								  }
								  
								  Scope of global variable: entire class members 
								  scope of the local variable : with in the same block.i.e in which executable block we declared with in that block 
								    we can able to use it. but we cant able to use out side of that block. if we try to access out side the block it 
									we will get compile time error. 
									
									
								 -> any of the varibale  with in the same scope we should not use more than one variable with same  name. it will consider '
                                  as duplicate variable name. in side java duplicate variable name we will not support , so we will get compile time error 
            Ex1:
								  
								  class A{
								  
								     int i=10;
									 int i =20;//cte 
								  }
				Ex2:
							 
							class A{
							   int i=10;
							}
							
							class B{
							
							  int i = 20; cs
							}
		  
		  
		      Ex3:
		             class A{
					    int age = 10;
						String age  = "20"; //CTE even though data type is different we cant use same for more than one variable with in the same scope
					 
					 }
				   Ex4:	 
					 
					 class  A{
					 
					     int i = 10;
						 
						 A(){
						 
						    int i = 40;
							
							sop(i);// 40
						 }
						 
						 a(String s){
						 
						    sop(i);//10
						 }
						 // if local and global variable both are having same name then how to differentiate local to global variable. 
						  a(int age, string name){
						     int i = 50;
						    sop(i);//50
							
							sop(i);//50
							sop(this.i);// 10  // ny using this operator we can identify global variables but we dont have any special key word for local variables.
						 }
						 
						 public static void main(String args[]){
						 
						    int i = 30;
							
							sop(i);// 30	


						  // here if we want to access global i variable how to access ?
                      //  sop(this.i);//CTE  why bzc this operator or super operator we can use only with in the non static members, but we cant use 
                       inside static members. 

                         // then how to access non static global variables inside static members :
                          ans: if we want to access non static global variables inside staitc members we should access thorugh 
                                  object or object reference variavles. 

							A a1 = new A();								  
							sop(a1.i);// this accessing thorugh obj ref variavle , if we are accessing memebers by using ref variable then object life is depending on main method life time.
							sop(new A().i);// this is accessing using direct object.  if we access by using direct object that object life time is only one line
							sop(a1.i);//
							
						 }
					 }
 object  ref variale access                        direct object access 
========================================================================
		       life time depending on                                        only one line
               method life time					 
		              
			   we can reuse the same object                                 we cant reuse this object.
			   more than one line 
					  
					  
				A a1 = new A();	      			     sop(new A().i);
				sop(a1.i);	
		

 
                     Ex5: 
					 
					  class A{
					     int i ;
						 
						 public static void main(String arags[]){
						 
						   int k;
						   
						   A a1 = new A();
						    sop(a1.i);// 0 
							sop(k);//CTE why bzc ,  for local variables there is no default value concept 
							       // so we should initialize our self before use the local variable else 
								    // we will CTE.
							int j = k+10;//CTE k is not initalized before use it. 
							
						 }
					     
					  }
					  
					  
					 exm 6:
					 
					  class A{
					  
					     int age = 30;
						 static int legs = 2;
						 
						 public static void main(String args[]){
						 
						    int k = 20;
							static int l = 40;//CTE in case local variavle there is no static local variable 
							                  // concept. static key is applicable only for global or common 
											  // to all scope but not local or speciifc to each one.
							
							
						 }
					  }
					  
					  
					  3. parameter variables or arguments variable:
					  =============================================
					  the variables which are declaring inside the signature those are called as 
					  parameter variables or argument variables.
					   
					   paramter or argument variables possible to declare only with in the constructor
					   signature or method signature. 
					   
					   
					   ex1:
					     class A{
						 
						       A(int i ){ // here i is called as paramter varable or argument varable
							     sop(i);// 10, 100, 200
							   }
							   
							   public static void main(String args[]){
							   
							     A a1 = new A(10);
							     A a2 = new A(100);
							     A a2 = new A(200);
							   }
							}
							
							Note: here we are not getting CTE even though we are not initalizing i value before 
							use it. why because, paramter values has to initialize be caller at time calling statement
							
							even for paramter variable also we dont have default value concept.callrer has to initalize
							the all parameter varable at the time calling statement.
							
							ex2:
							
							  class A{
							  
							    A(static int age ){//CTE we can't delcare paramter variables or local variable as static type
								                    // static is only for global purpose not for local purpose.
								
								   sop(age);
								}
							  }
							
							
							Ex3:
							
							class A{
							    int i = 20;// cs
								
								A(int k = 30){ // cTE we can't initalize the values  
								              // for parameter varable at the time declaration
								   sop(k);
								}
							
							}
							
							ex4:
							
							class A{
							
							   A(int k){  
								   k = 30; //       this is called reinitialization 
								   sop(k);// 30,30,30
								}
								
								public static void main(String args[]){
								
								  A a1 = new  A(10);
								  A a1 = new  A(200);
								  A a1 = new  A(2000);
								 
								}
							}
							
							ex5:
							
							class A{
							
							
							   A(int i){
							   
							     sop(i);
							   }
							   A(int k , String s){
							      sop(k);//
								  sop(s);//
								  sop(i);// CTE parameter variable scope is with in the same block.							   
							   }
							}
							
					  Note: local variable and parameter variable life scope is same i.e with in the block.
					  
Operators
--------------------------------------
Operators are different types
1.Equals Operator (==)
 ex: if(a==0){
		sop("Please enter the a value");
		}
2.Not Equals Operator(!=0)
ex: if(a!=0){
		sop(a+b);
		}
3.Greater then Operator(>)
ex: if(a>0){
		
		}
4.Less then Operator(<)
ex: if(a<10){
		}
5. Greator then or equals Operator(>=)
ex: if(a>=0){
		
		}
6. Less then or equals operator(<=)
ex: if(a<=100){
		}
7. And operator(&&)
ex: if(a>0 && b>0){
		
		}
8. OR operator(||)
ex: if(a>0 || b>0){

		}
		
Statements:
Checking the value of variable with different conditions using operators 
1.if statement
2. if - else
3. if- else if -else
4. if- else if - else if - else

if Condition
-----------------------------
if(condition) - true means it will go inside the if block, if false means it will not go inside the block and after the block statement it will execute.
 example :
 class Operator{
	
	int sum(int a, int b){
		if(a>0 && b>0){ //a=2, b=3;
		 return a+b;	//a=0,b=2
		}
		if(a==0){
			return a+1;
		}
		return a;
	}
	boolean validation(String s1,String s2){
		if(s1==s2){
			return true;
		}
		return false;
	}
	public static void main(String args[]){
		Operator op= new Operator();
		int sum=op.sum(2,3);
		System.out.println("sum of values:" + sum);
		int add=op.sum(0,2);
		System.out.println("sum of values:" + add);
		op.sum(2,3);
		op.sum(0,2);
		boolean flag=op.validation("java","j2EE");
		if(flag){
		System.out.println("Both String values are equal");
		}else{
				System.out.println("Both String values are not equal");
		}
		
}
}

2. if -else statement
if condition is true it will go to if block and if condition is false it will go else block.
 ex : if(flag){
		System.out.println("Both String values are equal");
		}else{
				System.out.println("Both String values are not equal");
		}
3. if- else if statement
if condition is true it will go to if block and if condition is false it will go else if statement, if it is true it will inside else if block, if it is false means it will go to else statement if else present other wise to out of the block.
 ex:       if(a>b){
			return a-b;
		}else if(a<b)
			return b-a;
			
			
4. Nested If statement:
Inside one if statement there will one more if statement , those will call as Nested if conditions.
ex: int diff(int a, int b){
	if(a!=0 &&  b!=0){ //a=0,b=3   a=5,b=3
		if(a>b)		   //5>3
		  return a-b;  //5-3	
		else if(a<b)
		  return b-a;
	}else{
		return 0;  
	}
		return 0;
	}
}
					  
					  
					  
					 
					   
                        
			
					   
			   
			  
			  
			  
			  
			  
			  
	   
	   
	   
	   
	   
	   
	   
		  
		
		
	   
			  
	   
	   
		
	
	   
		
		

	
				
				
			 
			 
	   
				 
			
			
		 
		 
		 
		 
	
					      
								
						 
					
			
			
			

	 
		  
		  
		  
		 
		 
		 
